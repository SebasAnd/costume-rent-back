type Query {
  me: User
}

type Mutation {
  login(email: String!, password: String!): AuthPayload!
  createCostume(
    code: String
    category: Category!
    purchase_value: Int!
    purchase_date: DateTime!
  ): Costume!
  updateCostume(code: String!, status: CostumeStatus!): Costume!
  createRent(costume: String!, client: String!, date: DateTime): Rent!
}

# type Subscription {
#   feedSubscription: Post
# }

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
}

enum CostumeStatus {
  READY
  RENT
  DIRTY
  REPAIR
  LOUNDRY
}

type Costume {
  id: ID!
  code: String!
  status: CostumeStatus!
  category: Category!
  status: Status!
  purchase_value: Int!
  purchase_date: DateTime!
}

type Category {
  id: ID!
  name: String!
}

type Client {
  id: ID!
  name: String!
  birthday: String!
  costumes: [Costume!]!
}

type Rent {
  id: ID!
  date: DateTime!
  costume: Costume!
  client: Client!
}
